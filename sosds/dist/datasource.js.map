{"version":3,"sources":["../src/datasource.js"],"names":["_","SosDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","options","query","buildQueryParameters","targets","filter","t","hide","console","log","length","when","data","datasourceRequest","method","headers","then","response","status","message","title","catch","err","replace","annotation","annotationQuery","range","datasource","enable","iconColor","rangeRaw","result","optionalOptions","target","interpolated","mapToTextValue","map","d","i","text","value","container","schema","job_id","comp_id","user_name","query_type","format","analysis","extra_params","refId"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class SosDatasource {\n\n    constructor(instanceSettings, $q, backendSrv, templateSrv) {\n        this.type = instanceSettings.type;\n        this.url = instanceSettings.url;\n        this.name = instanceSettings.name;\n        this.q = $q;\n        this.backendSrv = backendSrv;\n        this.templateSrv = templateSrv;\n    }\n\n    query(options) {\n        var query = this.buildQueryParameters(options);\n        query.targets = query.targets.filter(t => !t.hide);\n\n        console.log(\"query: \"+options)\n\n        if (query.targets.length <= 0) {\n            return this.q.when({data: []});\n        }\n\n        return this.backendSrv.datasourceRequest({\n            url: this.url + '/query',\n            method: 'POST',\n            data: options, // query,\n\t    /*\n            data: {\n                from: options.range.from.valueOf().toString(),\n                to: options.range.to.valueOf().toString(),\n\t\tqueries: query,\n\t    },\n\t    */\n\t    headers: { 'Content-Type': 'application/json' }\n\t});\n    }\n\n    testDatasource() {\n\treturn this.backendSrv.datasourceRequest({\n\t    url: this.url + '/',\n\t    method: 'GET'\n\t}).then(response => {\n\t    if (response.status === 200) {\n\t\treturn { status: \"success\", message: 'SOS Connection OK', title: \"Success\" };\n\t    }\n\t}).catch(err => {\n\t    console.log(err);\n\t    if (err.data && err.data.message) {\n\t\treturn { status: 'error', message: err.data.message };\n\t    } else {\n\t\treturn { status: 'error', message: err.status  };\n\t    }\n\t});\n    }\n\n    annotationQuery(options) {\n\tvar query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n\tvar annotationQuery = {\n\t    range: options.range,\n\t    annotation: {\n\t\tname: options.annotation.name,\n\t\tdatasource: options.annotation.datasource,\n\t\tenable: options.annotation.enable,\n\t\ticonColor: options.annotation.iconColor,\n\t\tquery: query\n\t    },\n\t    rangeRaw: options.rangeRaw\n\t};\n\n\tconsole.log(\"annotationQuery\")\n\n\treturn this.backendSrv.datasourceRequest({\n\t    url: this.url + '/annotations',\n\t    method: 'POST',\n\t    data: annotationQuery\n\t}).then(result => {\n\t    return result.data;\n\t});\n    }\n\n    metricFindQuery(options, optionalOptions) {\n\tvar target = typeof (options) === \"string\" ? options : options.target;\n\tvar interpolated = {\n            target: this.templateSrv.replace(target, null, 'regex')\n\t};\n\tconsole.log(\"metricFindQuery: \" + options + \"\\n\" + optionalOptions)\n\treturn this.backendSrv.datasourceRequest({\n\t    url: this.url + '/search',\n\t    data: interpolated,\n\t    method: 'POST',\n\t    headers: { 'Content-Type': 'application/json' }\n\t}).then(this.mapToTextValue);\n    }\n\n    mapToTextValue(result) {\n\treturn _.map(result.data, (d, i) => {\n\t    if (d && d.text && d.value) {\n\t\treturn { text: d.text, value: d.value };\n\t    }\n\t    return { text: d, value: i };\n\t});\n    }\n\n    buildQueryParameters(options) {\n\t//remove placeholder targets\n\tvar targets = _.map(options.targets, target => {\n\t    return {\n\t\ttarget: this.templateSrv.replace(target.target),\n\t\tcontainer: this.templateSrv.replace(target.container),\n\t\tschema: this.templateSrv.replace(target.schema),\n\t\tjob_id: this.templateSrv.replace(target.job_id),\n\t\tcomp_id: this.templateSrv.replace(target.comp_id),\n                user_name: this.templateSrv.replace(target.user_name),\n\t\tquery_type: this.templateSrv.replace(target.query_type) || 'metrics',\n\t\tformat: this.templateSrv.replace(target.format),\n                analysis: this.templateSrv.replace(target.analysis),\n                extra_params: this.templateSrv.replace(target.extra_params),\n\t\trefId: target.refId,\n\t\thide: target.hide,\n\t\ttype: target.type || 'timeserie'\n\t    };\n\t});\n\n\toptions.targets = targets;\n\n\treturn options;\n    }\n}\n"]}