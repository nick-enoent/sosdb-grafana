{"version":3,"sources":["../src/query_ctrl.js"],"names":["QueryCtrl","SosDatasourceQueryCtrl","$scope","$injector","uiSegmentSrv","scope","lastQueryMeta","lastQueryError","target","type","container","schema","job_id","comp_id","user_name","prdcr_name","query_type","analysis","format","extra_params","panelCtrl","events","on","onDataReceived","bind","onDataError","dataList","anySeriesFromQuery","_","find","refId","meta","err","data","results","queryRes","error","rawQuery","refresh","templateUrl"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAQA,kB,kBAAAA,S;;;;;;;;;;;;;;;;;;;;;2CAGKC,sB;;;AACT,4CAAYC,MAAZ,EAAoBC,SAApB,EAA+BC,YAA/B,EAA8C;AAAA;;AAAA,2JACpCF,MADoC,EAC5BC,SAD4B;;AAG1C,qBAAKE,KAAL,GAAaH,MAAb;;AAEA,qBAAKI,aAAL,GAAqB,IAArB;AACA,qBAAKC,cAAL,GAAsB,IAAtB;;AAEA,qBAAKH,YAAL,GAAoBA,YAApB;;AAEA,qBAAKI,MAAL,CAAYA,MAAZ,GAAqB,MAAKA,MAAL,CAAYA,MAAZ,IAAsB,eAA3C;AACA,qBAAKA,MAAL,CAAYC,IAAZ,GAAmB,MAAKD,MAAL,CAAYC,IAAZ,IAAoB,WAAvC;AACA,qBAAKD,MAAL,CAAYE,SAAZ,GAAwB,MAAKF,MAAL,CAAYE,SAApC;AACA,qBAAKF,MAAL,CAAYG,MAAZ,GAAqB,MAAKH,MAAL,CAAYG,MAAjC;AACA,qBAAKH,MAAL,CAAYI,MAAZ,GAAqB,MAAKJ,MAAL,CAAYI,MAAZ,IAAsB,CAA3C;AACA,qBAAKJ,MAAL,CAAYK,OAAZ,GAAsB,MAAKL,MAAL,CAAYK,OAAZ,IAAuB,CAA7C;AACA,qBAAKL,MAAL,CAAYM,SAAZ,GAAwB,MAAKN,MAAL,CAAYM,SAApC;AACA,qBAAKN,MAAL,CAAYO,UAAZ,GAAyB,MAAKP,MAAL,CAAYO,UAArC;AACA,qBAAKP,MAAL,CAAYQ,UAAZ,GAAyB,MAAKR,MAAL,CAAYQ,UAAZ,IAA0B,SAAnD;AACA,qBAAKR,MAAL,CAAYS,QAAZ,GAAuB,MAAKT,MAAL,CAAYS,QAAnC;AACA,qBAAKT,MAAL,CAAYU,MAAZ,GAAqB,MAAKV,MAAL,CAAYU,MAAZ,IAAsB,aAA3C;AACA,qBAAKV,MAAL,CAAYW,YAAZ,GAA2B,MAAKX,MAAL,CAAYW,YAAvC;;AAEA,qBAAKC,SAAL,CAAeC,MAAf,CAAsBC,EAAtB,CAAyB,eAAzB,EAA0C,MAAKC,cAAL,CAAoBC,IAApB,OAA1C,EAA0EtB,MAA1E;AACA,qBAAKkB,SAAL,CAAeC,MAAf,CAAsBC,EAAtB,CAAyB,YAAzB,EAAuC,MAAKG,WAAL,CAAiBD,IAAjB,OAAvC,EAAoEtB,MAApE;AAxB0C;AAyB7C;;;;8CAEcwB,Q,EAAU;AAC5B,uBAAKpB,aAAL,GAAqB,IAArB;AACA,uBAAKC,cAAL,GAAsB,IAAtB;;AAEA,sBAAIoB,qBAAqBC,EAAEC,IAAF,CAAOH,QAAP,EAAiB,EAAEI,OAAO,KAAKtB,MAAL,CAAYsB,KAArB,EAAjB,CAAzB;AACA,sBAAIH,kBAAJ,EAAwB;AACpB,0BAAKrB,aAAL,GAAqBqB,mBAAmBI,IAAxC;AACH;AACG;;;2CAEWC,G,EAAK;AACpB,sBAAIA,IAAIC,IAAJ,IAAYD,IAAIC,IAAJ,CAASC,OAAzB,EAAkC;AAC9B,yBAAIC,WAAWH,IAAIC,IAAJ,CAASC,OAAT,CAAiB,KAAK1B,MAAL,CAAYsB,KAA7B,CAAf;AACA,yBAAIK,QAAJ,EAAc;AACjB,6BAAK7B,aAAL,GAAqB6B,SAASJ,IAA9B;AACA,6BAAKxB,cAAL,GAAsB4B,SAASC,KAA/B;AACI;AACJ;AACG;;;kDAqBkB;AACtB,uBAAK5B,MAAL,CAAY6B,QAAZ,GAAuB,CAAC,KAAK7B,MAAL,CAAY6B,QAApC;AACI;;;kDAEkB;AACtB,uBAAKjB,SAAL,CAAekB,OAAf,GADsB,CACI;AACtB;;;;WAzEuCtC,S;;;;AA4E5CC,gCAAuBsC,WAAvB,GAAqC,4BAArC","file":"query_ctrl.js","sourcesContent":["import {QueryCtrl} from 'app/plugins/sdk';\nimport './css/query-editor.css!'\n\nexport class SosDatasourceQueryCtrl extends QueryCtrl {\n    constructor($scope, $injector, uiSegmentSrv)  {\n        super($scope, $injector);\n\n        this.scope = $scope;\n\n        this.lastQueryMeta = null;\n        this.lastQueryError = null;\n\n        this.uiSegmentSrv = uiSegmentSrv;\n\n        this.target.target = this.target.target || 'select metric';\n        this.target.type = this.target.type || 'timeserie';\n        this.target.container = this.target.container;\n        this.target.schema = this.target.schema;\n        this.target.job_id = this.target.job_id || 0;\n        this.target.comp_id = this.target.comp_id || 0;\n        this.target.user_name = this.target.user_name;\n        this.target.prdcr_name = this.target.prdcr_name;\n        this.target.query_type = this.target.query_type || 'metrics';\n        this.target.analysis = this.target.analysis;\n        this.target.format = this.target.format || 'time_series';\n        this.target.extra_params = this.target.extra_params;\n\n        this.panelCtrl.events.on('data-received', this.onDataReceived.bind(this), $scope);\n        this.panelCtrl.events.on('data-error', this.onDataError.bind(this), $scope);\n    }\n\n    onDataReceived(dataList) {\n\tthis.lastQueryMeta = null;\n\tthis.lastQueryError = null;\n\n\tlet anySeriesFromQuery = _.find(dataList, { refId: this.target.refId });\n\tif (anySeriesFromQuery) {\n\t    this.lastQueryMeta = anySeriesFromQuery.meta;\n\t}\n    }\n\n    onDataError(err) {\n\tif (err.data && err.data.results) {\n\t    let queryRes = err.data.results[this.target.refId];\n\t    if (queryRes) {\n\t\tthis.lastQueryMeta = queryRes.meta;\n\t\tthis.lastQueryError = queryRes.error;\n\t    }\n\t}\n    }\n    /*\n      getMetrics() {\n      this.cont_schema = this.target.container +'&'+this.target.schema+'&metric_attrs'\n      return this.datasource.metricFindQuery(this.cont_schema)\n      .then(this.uiSegmentSrv.transformToSegments(false));\n      }\n\n      getIdxAttrs() {\n      this.cont_schema = this.target.container+'&'+this.target.schema+'&idx_attrs'\n      return this.datasource.metricFindQuery(this.cont_schema)\n      .then(this.uiSegmentSrv.transformToSegments(false));\n      }\n\n      getOptions() {\n      return this.datasource.metricFindQuery(this.target)\n      .then(this.uiSegmentSrv.transformToSegments(false));\n      // Options have to be transformed by uiSegmentSrv to be usable by metric-segment-model directive\n      }\n    */\n\n    toggleEditorMode() {\n\tthis.target.rawQuery = !this.target.rawQuery;\n    }\n\n    onChangeInternal() {\n\tthis.panelCtrl.refresh(); // Asks the panel to refresh data.\n    }\n}\n\nSosDatasourceQueryCtrl.templateUrl = 'partials/query.editor.html';\n\n"]}