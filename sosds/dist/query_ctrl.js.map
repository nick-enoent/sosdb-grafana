{"version":3,"sources":["../src/query_ctrl.js"],"names":["QueryCtrl","SosDatasourceQueryCtrl","$scope","$injector","uiSegmentSrv","scope","target","type","container","schema","index","comp_id","query_type","cont_schema","datasource","metricFindQuery","then","transformToSegments","rawQuery","panelCtrl","refresh","templateUrl"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAQA,e,kBAAAA,S;;;;;;;;;;;;;;;;;;;;;wCAGKC,sB;;;AACX,wCAAYC,MAAZ,EAAoBC,SAApB,EAA+BC,YAA/B,EAA8C;AAAA;;AAAA,sJACtCF,MADsC,EAC9BC,SAD8B;;AAG5C,gBAAKE,KAAL,GAAaH,MAAb;AACA,gBAAKE,YAAL,GAAoBA,YAApB;AACA,gBAAKE,MAAL,CAAYA,MAAZ,GAAqB,MAAKA,MAAL,CAAYA,MAAZ,IAAsB,eAA3C;AACA,gBAAKA,MAAL,CAAYC,IAAZ,GAAmB,MAAKD,MAAL,CAAYC,IAAZ,IAAoB,WAAvC;AACA,gBAAKD,MAAL,CAAYE,SAAZ,GAAwB,MAAKF,MAAL,CAAYE,SAApC;AACA,gBAAKF,MAAL,CAAYG,MAAZ,GAAqB,MAAKH,MAAL,CAAYG,MAAjC;AACA,gBAAKH,MAAL,CAAYI,KAAZ,GAAoB,MAAKJ,MAAL,CAAYI,KAAhC;AACA,gBAAKJ,MAAL,CAAYK,OAAZ,GAAsB,MAAKL,MAAL,CAAYK,OAAlC;AACA,gBAAKL,MAAL,CAAYM,UAAZ,GAAyB,MAAKN,MAAL,CAAYM,UAAZ,IAA0B,SAAnD;;AAEA,cAAI,CAAC,MAAKN,MAAL,CAAYM,UAAjB,EAA6B;AACzB,kBAAKN,MAAL,CAAYM,UAAZ,GAAyB,SAAzB;AACH;AAf2C;AAgB7C;;;;uCAEY;AACX,iBAAKC,WAAL,GAAmB,KAAKP,MAAL,CAAYE,SAAZ,GAAuB,GAAvB,GAA2B,KAAKF,MAAL,CAAYG,MAAvC,GAA8C,eAAjE;AACA,mBAAO,KAAKK,UAAL,CAAgBC,eAAhB,CAAgC,KAAKF,WAArC,EACJG,IADI,CACC,KAAKZ,YAAL,CAAkBa,mBAAlB,CAAsC,KAAtC,CADD,CAAP;AAED;;;wCAEa;AACZ,iBAAKJ,WAAL,GAAmB,KAAKP,MAAL,CAAYE,SAAZ,GAAsB,GAAtB,GAA0B,KAAKF,MAAL,CAAYG,MAAtC,GAA6C,YAAhE;AACA,mBAAO,KAAKK,UAAL,CAAgBC,eAAhB,CAAgC,KAAKF,WAArC,EACJG,IADI,CACC,KAAKZ,YAAL,CAAkBa,mBAAlB,CAAsC,KAAtC,CADD,CAAP;AAED;;;uCAEY;AACX,mBAAO,KAAKH,UAAL,CAAgBC,eAAhB,CAAgC,KAAKT,MAArC,EACJU,IADI,CACC,KAAKZ,YAAL,CAAkBa,mBAAlB,CAAsC,KAAtC,CADD,CAAP;AAEE;AACH;;;6CAEkB;AACjB,iBAAKX,MAAL,CAAYY,QAAZ,GAAuB,CAAC,KAAKZ,MAAL,CAAYY,QAApC;AACD;;;6CAEkB;AACjB,iBAAKC,SAAL,CAAeC,OAAf,GADiB,CACS;AAC3B;;;;QA3CyCpB,S;;;;AA8C5CC,6BAAuBoB,WAAvB,GAAqC,4BAArC","file":"query_ctrl.js","sourcesContent":["import {QueryCtrl} from 'app/plugins/sdk';\nimport './css/query-editor.css!'\n\nexport class SosDatasourceQueryCtrl extends QueryCtrl {\n  constructor($scope, $injector, uiSegmentSrv)  {\n    super($scope, $injector);\n\n    this.scope = $scope;\n    this.uiSegmentSrv = uiSegmentSrv;\n    this.target.target = this.target.target || 'select metric';\n    this.target.type = this.target.type || 'timeserie';\n    this.target.container = this.target.container;\n    this.target.schema = this.target.schema;\n    this.target.index = this.target.index;\n    this.target.comp_id = this.target.comp_id;\n    this.target.query_type = this.target.query_type || 'metrics';\n    \n    if (!this.target.query_type) {\n        this.target.query_type = 'metrics';\n    }\n  }\n\n  getMetrics() {\n    this.cont_schema = this.target.container +'&'+this.target.schema+'&metric_attrs'\n    return this.datasource.metricFindQuery(this.cont_schema)\n      .then(this.uiSegmentSrv.transformToSegments(false));\n  }\n\n  getIdxAttrs() {\n    this.cont_schema = this.target.container+'&'+this.target.schema+'&idx_attrs'\n    return this.datasource.metricFindQuery(this.cont_schema)\n      .then(this.uiSegmentSrv.transformToSegments(false));\n  }\n\n  getOptions() {\n    return this.datasource.metricFindQuery(this.target)\n      .then(this.uiSegmentSrv.transformToSegments(false));\n      // Options have to be transformed by uiSegmentSrv to be usable by metric-segment-model directive\n  }\n\n  toggleEditorMode() {\n    this.target.rawQuery = !this.target.rawQuery;\n  }\n\n  onChangeInternal() {\n    this.panelCtrl.refresh(); // Asks the panel to refresh data.\n  }\n}\n\nSosDatasourceQueryCtrl.templateUrl = 'partials/query.editor.html';\n\n"]}